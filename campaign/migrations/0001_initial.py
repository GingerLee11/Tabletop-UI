# Generated by Django 4.0.6 on 2022-11-07 23:32

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AppearanceAttribute',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attribute_type', models.CharField(choices=[('appearance1', 'appearance1'), ('appearance2', 'appearance2'), ('appearance3', 'appearance3'), ('appearance4', 'appearance4')], max_length=100)),
                ('description', models.CharField(default='hot', max_length=1000, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='ArcanaConsequenceRequirements',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='ArcanaConsequences',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(max_length=500)),
                ('consequence_count', models.IntegerField(default=1, help_text='Indicates how many times this conequence can be taken.')),
            ],
        ),
        migrations.CreateModel(
            name='ArcanaMoveExtras',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=300)),
            ],
        ),
        migrations.CreateModel(
            name='ArcanaMoveInstance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('charges', models.IntegerField(default=0)),
                ('abilities', models.ManyToManyField(blank=True, to='campaign.arcanamoveextras')),
            ],
        ),
        migrations.CreateModel(
            name='ArcanaMoveRequirements',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Armor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('armor', models.IntegerField()),
                ('armor_description', models.CharField(blank=True, max_length=150, null=True)),
                ('armor_condition', models.CharField(blank=True, max_length=150, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Background',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('background', models.CharField(max_length=100)),
                ('description', models.TextField(max_length=1000)),
                ('description2', models.TextField(blank=True, max_length=1000, null=True)),
                ('description3', models.TextField(blank=True, max_length=1000, null=True)),
                ('total_charges', models.IntegerField(blank=True, null=True)),
                ('charge_name', models.CharField(blank=True, max_length=120, null=True)),
                ('effect_name', models.CharField(blank=True, max_length=120, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='BackgroundExtraAbilities',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=200)),
                ('background', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='campaign.background')),
            ],
        ),
        migrations.CreateModel(
            name='BackgroundInstance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('charges', models.IntegerField(blank=True, default=0, null=True)),
                ('effect_activated', models.BooleanField(blank=True, help_text='If there is an effect associated with this move, it can be activated here.', null=True)),
                ('purpose', models.CharField(blank=True, choices=[('A loved one was killed or abducted', 'A loved one was killed or abducted'), ('Someone gave their life to save you', 'Someone gave their life to save you'), ('Your idol sacrificed themselves to save many', 'Your idol sacrificed themselves to save many'), ('You stumbled upon a dark mystery', 'You stumbled upon a dark mystery'), ('You must make amends for a terrible mistake', 'You must make amends for a terrible mistake')], max_length=250, null=True)),
                ('abilities', models.ManyToManyField(blank=True, to='campaign.backgroundextraabilities')),
                ('background', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='campaign.background')),
            ],
        ),
        migrations.CreateModel(
            name='BeastOfLegend',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=150)),
            ],
        ),
        migrations.CreateModel(
            name='Campaign',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('campaign_name', models.CharField(max_length=250)),
                ('campaign_code', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('private', models.BooleanField(help_text='Is this a private campaign or open to anyone to join?')),
                ('campaign_status', models.CharField(choices=[('Open', 'Open'), ('Full', 'Full'), ('Completed', 'Completed')], max_length=250)),
                ('GM', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Character',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('character_class', models.CharField(choices=[('The Blessed', 'The Blessed'), ('The Fox', 'The Fox'), ('The Heavy', 'The Heavy'), ('The Judge', 'The Judge'), ('The Lightbearer', 'The Lightbearer'), ('The Marshal', 'The Marshal'), ('The Ranger', 'The Ranger'), ('The Seeker', 'The Seeker'), ('The Would-Be Hero', 'The Would-Be Hero')], default='The Blessed', max_length=100)),
                ('character_name', models.CharField(max_length=150)),
                ('strength', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(-1), django.core.validators.MaxValueValidator(3)])),
                ('dexterity', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(-1), django.core.validators.MaxValueValidator(3)])),
                ('intelligence', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(-1), django.core.validators.MaxValueValidator(3)])),
                ('wisdom', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(-1), django.core.validators.MaxValueValidator(3)])),
                ('constitution', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(-1), django.core.validators.MaxValueValidator(3)])),
                ('charisma', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(-1), django.core.validators.MaxValueValidator(3)])),
                ('weakened', models.BooleanField(default=False)),
                ('dazed', models.BooleanField(default=False)),
                ('miserable', models.BooleanField(default=False)),
                ('damage_die', models.TextField(choices=[('D4', 'D4'), ('D6', 'D6'), ('D8', 'D8'), ('D10', 'D10'), ('D12', 'D12'), ('D20', 'D20')], default='D6', max_length=30)),
                ('max_hp', models.IntegerField(default=18, verbose_name='Max HP')),
                ('current_hp', models.IntegerField(default=18, verbose_name='HP')),
                ('armor', models.IntegerField(default=0)),
                ('experience_points', models.IntegerField(default=0, verbose_name='XP')),
                ('level', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('undefined_items', models.IntegerField(blank=True, null=True)),
                ('undefined_small_items', models.IntegerField(blank=True, null=True)),
                ('appearance1', models.ForeignKey(limit_choices_to=models.Q(('attribute_type__iexact', 'appearance1')), null=True, on_delete=django.db.models.deletion.CASCADE, related_name='appearance1', to='campaign.appearanceattribute')),
                ('appearance2', models.ForeignKey(limit_choices_to=models.Q(('attribute_type__iexact', 'appearance2')), null=True, on_delete=django.db.models.deletion.CASCADE, related_name='appearance2', to='campaign.appearanceattribute')),
                ('appearance3', models.ForeignKey(limit_choices_to=models.Q(('attribute_type__iexact', 'appearance3')), null=True, on_delete=django.db.models.deletion.CASCADE, related_name='appearance3', to='campaign.appearanceattribute')),
                ('appearance4', models.ForeignKey(limit_choices_to=models.Q(('attribute_type__iexact', 'appearance4')), null=True, on_delete=django.db.models.deletion.CASCADE, related_name='appearance4', to='campaign.appearanceattribute')),
                ('background', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='campaign.background')),
                ('background_instance', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='character_to_background', to='campaign.backgroundinstance')),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='campaign.campaign')),
            ],
        ),
        migrations.CreateModel(
            name='CharacterClass',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('class_name', models.CharField(max_length=100, unique=True)),
                ('complexity', models.CharField(choices=[('low complexity', 'low complexity'), ('low/medium complexity', 'low/medium complexity'), ('medium complexity', 'medium complexity'), ('high complexity', 'high complexity'), ('variable complexity', 'variable complexity')], max_length=100)),
                ('description', models.TextField(max_length=1000)),
                ('character_status', models.BooleanField(default=False, help_text='Is this a finished character? \n        I.e is there a character model in the database?\n        Is there a form, a view, url hooked up, and \n        templates for this character?')),
            ],
        ),
        migrations.CreateModel(
            name='Damage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=300, null=True)),
                ('damage_die', models.CharField(blank=True, choices=[('D4', 'D4'), ('D6', 'D6'), ('D8', 'D8'), ('D10', 'D10'), ('D12', 'D12'), ('D20', 'D20')], max_length=50, null=True)),
                ('damage_bonus', models.IntegerField(blank=True, null=True)),
                ('has_advantage', models.BooleanField(blank=True, null=True)),
                ('has_disadvantage', models.BooleanField(blank=True, null=True)),
                ('piercing_bonus', models.IntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='DanuOfferings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='DefaultNPC',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('npc_type', models.CharField(blank=True, choices=[('Initiate of Danu', 'Initiate of Danu')], max_length=150, null=True)),
                ('name', models.CharField(max_length=100)),
                ('default_max_hp', models.IntegerField()),
                ('default_special_qualities', models.CharField(blank=True, max_length=150, null=True)),
                ('default_instinct', models.CharField(blank=True, max_length=150, null=True)),
                ('default_residence', models.CharField(blank=True, max_length=150, null=True)),
                ('default_cost', models.CharField(blank=True, max_length=100, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('default_armor', models.ManyToManyField(blank=True, to='campaign.armor')),
                ('default_damage', models.ManyToManyField(blank=True, to='campaign.damage')),
            ],
        ),
        migrations.CreateModel(
            name='DemandsOfAratis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=300)),
            ],
        ),
        migrations.CreateModel(
            name='FearAndAnger',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attribute_type', models.CharField(choices=[('fear', 'fear'), ('anger', 'anger')], max_length=10)),
                ('description', models.CharField(max_length=150)),
            ],
        ),
        migrations.CreateModel(
            name='FollowerInstance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('loyalty', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(3)])),
                ('cost', models.CharField(help_text='A follower\'s cost describes what keeps them following a PC\'s lead.\n            It\'s usually a few words, like "coin, pament, treasure" or "affection, respect" or "training". \n            ', max_length=100)),
                ('undefined_items', models.IntegerField(blank=True, null=True)),
                ('undefined_small_items', models.IntegerField(blank=True, null=True)),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='campaign.campaign')),
                ('character', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='campaign.character')),
            ],
        ),
        migrations.CreateModel(
            name='GameMasterMoves',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=300)),
                ('damage_die', models.CharField(blank=True, choices=[('D4', 'D4'), ('D6', 'D6'), ('D8', 'D8'), ('D10', 'D10'), ('D12', 'D12'), ('D20', 'D20')], max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='HeliorWorship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
            ],
        ),
        migrations.CreateModel(
            name='HistoryOfViolence',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('history_theme', models.CharField(choices=[('stories of glory', 'Just about everyone here talks about the time you...'), ('terrible stories', 'But folks are less keen to discuss...'), ('fears', 'What keep you up at night?')], max_length=300)),
                ('history_description', models.TextField(max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name='InitiateOfDanuAttribute',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('initate', models.CharField(choices=[('Enfys', 'Enfys'), ('Olwin', 'Olwin'), ('Afon', 'Afon'), ('Gwendyl', 'Gwendyl'), ('Seren the Eldest', 'Seren the Eldest')], max_length=100)),
                ('description', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='InventoryItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weight', models.IntegerField()),
                ('name', models.CharField(max_length=150)),
                ('description', models.CharField(blank=True, max_length=300, null=True)),
                ('total_uses', models.IntegerField(blank=True, help_text='Does this item have a set number of uses?', null=True)),
                ('has_ammo', models.BooleanField(blank=True, help_text='Does this item have ammo; arrows, throwing knives, etc, but is more than 10 or so?', null=True)),
                ('uses_name', models.CharField(blank=True, help_text='What is the name of the usage; e.g. uses, hours, minutes', max_length=50, null=True)),
                ('damage', models.CharField(blank=True, choices=[('D4', 'D4'), ('D6', 'D6'), ('D8', 'D8'), ('D10', 'D10'), ('D12', 'D12'), ('D20', 'D20')], help_text='Does this have any kind of special damage output (ask GM if unsure)?', max_length=50, null=True)),
                ('armor', models.IntegerField(blank=True, help_text='Does this item provide armor (ask GM if unsure)?', null=True)),
                ('damage_bonus', models.IntegerField(blank=True, help_text='Does this item provide bonus damage (ask GM if unsure)?', null=True)),
                ('armor_bonus', models.IntegerField(blank=True, help_text='Does this item provide bonus armor (is it a shield or similar)?', null=True)),
                ('piercing_bonus', models.BooleanField(blank=True, help_text='Does this item have a set piercing bonus (rather than depending on the prosperity of the village)?', null=True)),
                ('is_piercing', models.BooleanField(blank=True, help_text='Would this item pierce armor (arrows, very sharp swords, etc.)?', null=True)),
                ('default_item', models.BooleanField(default=False, help_text='Is this item a default item present at the beginning of every campaign?')),
                ('can_view', models.ManyToManyField(blank=True, related_name='can_view_item', to='campaign.character')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_by_item', to='campaign.character')),
            ],
        ),
        migrations.CreateModel(
            name='Invocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('ongoing', models.BooleanField()),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='LightbearerPredecessor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250)),
            ],
        ),
        migrations.CreateModel(
            name='MajorArcanaDetails',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.CharField(choices=[('Where did you aquire it?', 'Where did you aquire it?'), ('From whose grasp did you wrest it?', 'From whose grasp did you wrest it?'), ('Who else wants it?', 'Who else wants it?'), ('What did it cost you?', 'What did it cost you?')], max_length=250)),
                ('answer', models.TextField(max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name='MoveExtraAbilities',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=300)),
            ],
        ),
        migrations.CreateModel(
            name='MoveRequirements',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('restricted_by_character', models.CharField(blank=True, choices=[('The Blessed', 'The Blessed'), ('The Fox', 'The Fox'), ('The Heavy', 'The Heavy'), ('The Judge', 'The Judge'), ('The Lightbearer', 'The Lightbearer'), ('The Marshal', 'The Marshal'), ('The Ranger', 'The Ranger'), ('The Seeker', 'The Seeker'), ('The Would-Be Hero', 'The Would-Be Hero')], max_length=100, null=True)),
                ('level_restricted', models.IntegerField(blank=True, help_text='What is the minimum level required to unlock this move?', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='RemarkableTraits',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='SmallItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('description', models.CharField(blank=True, max_length=300, null=True)),
                ('total_uses', models.IntegerField(blank=True, null=True)),
                ('has_ammo', models.BooleanField(blank=True, help_text='Does this item have ammo; arrows, throwing knives, etc, but is more than 10 or so?', null=True)),
                ('uses_name', models.CharField(blank=True, help_text='What is the name of the usage; e.g. uses, hours, minutes', max_length=50, null=True)),
                ('damage', models.CharField(blank=True, choices=[('D4', 'D4'), ('D6', 'D6'), ('D8', 'D8'), ('D10', 'D10'), ('D12', 'D12'), ('D20', 'D20')], help_text='Does this have any kind of special damage output (ask GM if unsure)?', max_length=50, null=True)),
                ('armor', models.IntegerField(blank=True, help_text='Does this item provide armor (ask GM if unsure)?', null=True)),
                ('damage_bonus', models.IntegerField(blank=True, help_text='Does this item provide bonus damage (ask GM if unsure)?', null=True)),
                ('armor_bonus', models.IntegerField(blank=True, help_text='Does this item provide bonus armor (is it a shield or similar)?', null=True)),
                ('piercing_bonus', models.BooleanField(blank=True, help_text='Does this item have a set piercing bonus (rather than depending on the prosperity of the village)?', null=True)),
                ('is_piercing', models.BooleanField(blank=True, help_text='Would this item pierce armor (arrows, very sharp swords, etc.)?', null=True)),
                ('default_item', models.BooleanField(default=False, help_text='Is this item a default item present at the beginning of every campaign?')),
                ('can_view', models.ManyToManyField(blank=True, related_name='can_view_small_item', to='campaign.character')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_by_small_item', to='campaign.character')),
            ],
        ),
        migrations.CreateModel(
            name='SpecialPossessionExtras',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weight', models.IntegerField()),
                ('name', models.CharField(max_length=100)),
                ('is_item', models.BooleanField(default=False)),
                ('description', models.CharField(blank=True, max_length=100, null=True)),
                ('damage_bonus', models.IntegerField(blank=True, null=True)),
                ('piercing_bonus', models.IntegerField(blank=True, null=True)),
                ('is_piercing', models.BooleanField(blank=True, null=True)),
                ('total_uses', models.IntegerField(blank=True, null=True)),
                ('has_ammo', models.IntegerField(blank=True, null=True)),
                ('uses_name', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='SymbolOfAuthority',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weight', models.IntegerField()),
                ('symbol', models.CharField(max_length=150)),
                ('description', models.TextField(max_length=250)),
            ],
        ),
        migrations.CreateModel(
            name='Tags',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='TaleDetails',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tale_detail', models.CharField(max_length=400)),
            ],
        ),
        migrations.CreateModel(
            name='TheChronical',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attribute_type', models.CharField(choices=[('positive', 'On the plus side, it...'), ('negative', 'But alas it...')], default=('positive', 'On the plus side, it...'), help_text='Is this aspect of the chronical positive or not?', max_length=100)),
                ('chronical_description', models.CharField(max_length=250)),
            ],
        ),
        migrations.CreateModel(
            name='InitiateOfDanuInstance',
            fields=[
                ('followerinstance_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='campaign.followerinstance')),
                ('attribute2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='attribute2', to='campaign.initiateofdanuattribute')),
                ('attribute3', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='attribute3', to='campaign.initiateofdanuattribute')),
                ('attribute4', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='attribute4', to='campaign.initiateofdanuattribute')),
            ],
            bases=('campaign.followerinstance',),
        ),
        migrations.CreateModel(
            name='TheFox',
            fields=[
                ('character_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='campaign.character')),
            ],
            bases=('campaign.character',),
        ),
        migrations.CreateModel(
            name='TheMarshal',
            fields=[
                ('character_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='campaign.character')),
                ('war_story', models.CharField(choices=[('to repel a nighttime raid by crinwin from the Great Wood.', 'to repel a nighttime raid by crinwin from the Great Wood.'), ("to drive off bandits who'd taken up near the Ruined Tower", "to drive off bandits who'd taken up near the Ruined Tower"), ('to fend off Hillfolk pursuing a blood feud', 'to fend off Hillfolk pursuing a blood feud'), ('against Brennan and his Claws, before they settled in Marshedge.', 'against Brennan and his Claws, before they settled in Marshedge.'), ('to face a brutish hagr, come down from the Foothills to wreak havoc.', 'to face a brutish hagr, come down from the Foothills to wreak havoc.'), ("to hunt down beasts (wolves, drakes, or bears maybe?) who'd been preying on the village.", "to hunt down beasts (wolves, drakes, or bears maybe?) who'd been preying on the village.")], max_length=300, verbose_name='The last time the milita saw serious action, it was...')),
                ('war_detail_1', models.TextField(blank=True, null=True, verbose_name='When exactly did it happen?')),
                ('war_detail_2', models.TextField(blank=True, null=True, verbose_name='Who lost their life, and who mourns them?')),
                ('war_detail_3', models.TextField(blank=True, null=True, verbose_name='Who from Stonetop was maimed, and how?')),
                ('war_detail_4', models.TextField(blank=True, null=True, verbose_name='Who saved the day, and how?')),
                ('war_detail_5', models.TextField(blank=True, null=True, verbose_name='How did the enemy get away, and whom do you still blame for it?')),
                ('war_detail_6', models.TextField(blank=True, null=True, verbose_name='Who comported themselves with honor?')),
                ('war_detail_7', models.TextField(blank=True, null=True, verbose_name="What's been bugging you about it ever since?")),
                ('war_detail_8', models.TextField(blank=True, null=True, verbose_name="What's got you even more worried now?")),
            ],
            bases=('campaign.character',),
        ),
        migrations.CreateModel(
            name='TheRanger',
            fields=[
                ('character_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='campaign.character')),
                ('something_wicked', models.CharField(choices=[('A dark, unwholesome presence lurking in the Great Wood', 'A dark, unwholesome presence lurking in the Great Wood'), ('A strange, furtive figure seen near the Ruined Tower', 'A strange, furtive figure seen near the Ruined Tower'), ('Something big & savage stalking the northern foothills', 'Something big & savage stalking the northern foothills'), ("Whatever's made the lizard-like ganagoeg of Ferrier's Fen so bold", "Whatever's made the lizard-like ganagoeg of Ferrier's Fen so bold"), ('That of which the Hillfolk refuse to speak', 'That of which the Hillfolk refuse to speak')], max_length=200, verbose_name="What is it that you're so worried about?")),
                ('wicked_detail_1', models.TextField(blank=True, null=True, verbose_name='What, exactly, do you think it is?')),
                ('wicked_detail_2', models.TextField(blank=True, null=True, verbose_name='What did you see, and how close did you have to get to see it?')),
                ('wicked_detail_3', models.TextField(blank=True, null=True, verbose_name='Whom or what have you lost to it?')),
                ('wicked_detail_4', models.TextField(blank=True, null=True, verbose_name='What did it leave behind?')),
                ('wicked_detail_5', models.TextField(blank=True, null=True, verbose_name='What do you think it wants?')),
                ('wicked_detail_6', models.TextField(blank=True, null=True, verbose_name='Who refuses to believe you?')),
                ('wicked_detail_7', models.TextField(blank=True, null=True, verbose_name='Who can tell you more, if you can only convince them?')),
            ],
            bases=('campaign.character',),
        ),
        migrations.CreateModel(
            name='TheSeeker',
            fields=[
                ('character_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='campaign.character')),
                ('major_arcana_where', models.CharField(blank=True, max_length=300, null=True, verbose_name='Where did you aquire it?')),
                ('major_arcana_from', models.CharField(blank=True, max_length=300, null=True, verbose_name='From whose grasp did you wrest it?')),
                ('major_arcana_who', models.CharField(blank=True, max_length=300, null=True, verbose_name='Who else wants it?')),
                ('major_arcana_cost', models.CharField(blank=True, max_length=300, null=True, verbose_name='What did it cost you?')),
                ('major_arcana_unlocking', models.TextField(null=True, verbose_name="\n    You've begun to unlock the mysteries of your major arcanum.\n    When and how did that happen?\n    ")),
                ('minor_arcana1', models.TextField(null=True, verbose_name="\n        Choose one whose secrets you have unlocked. If\n        it's portable, you either keep it on your person or\n        hidden away somewhere safe. Where is it now?\n        How did you come to master it?\n        ")),
                ('minor_arcana2', models.TextField(null=True, verbose_name='\n        Choose another, which you have not yet mastered. It\n        is either in your possession or in a secret place known\n        only to you. Where is it? How did you fi nd it?\n        ')),
                ('minor_arcana3', models.TextField(null=True, verbose_name='\n        The third you have not yet found, but you have a\n        lead on it. Give the card back to the GM, but make\n        note of it below. During play, ask the GM what you\n        know about it.\n        ')),
            ],
            bases=('campaign.character',),
        ),
        migrations.CreateModel(
            name='Stock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stock_type', models.CharField(choices=[('tag', 'tag'), ('move', 'move')], max_length=100)),
                ('name', models.CharField(max_length=250)),
                ('character', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='campaign.character')),
            ],
        ),
        migrations.CreateModel(
            name='SpecialPossessionSingleChoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weight', models.IntegerField()),
                ('description', models.CharField(max_length=100)),
                ('damage_bonus', models.IntegerField(blank=True, null=True)),
                ('is_piercing', models.BooleanField(blank=True, null=True)),
                ('total_uses', models.IntegerField(blank=True, null=True)),
                ('uses_name', models.CharField(blank=True, max_length=100, null=True)),
                ('tags', models.ManyToManyField(blank=True, to='campaign.tags')),
            ],
        ),
        migrations.CreateModel(
            name='SpecialPossessions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('possession_name', models.CharField(max_length=300)),
                ('description', models.TextField(blank=True, max_length=1000, null=True)),
                ('description2', models.TextField(blank=True, max_length=1000, null=True)),
                ('total_uses', models.IntegerField(blank=True, help_text='Define how many time this possession can be used', null=True)),
                ('is_follower', models.BooleanField(default=False, help_text='Is this "possession" a follower?')),
                ('HP', models.IntegerField(blank=True, help_text='How many health points do they have?', null=True)),
                ('armor', models.IntegerField(blank=True, help_text='How much armor do they have?', null=True)),
                ('instinct', models.CharField(blank=True, help_text="Write an instict with 'To...' I.e. To bark and threaten.", max_length=300, null=True)),
                ('cost', models.CharField(blank=True, help_text='The cost is what is needed to increase the loyalty of the follower', max_length=150, null=True)),
                ('character_class', models.ManyToManyField(help_text='What characters can potentially use this special posession?', to='campaign.characterclass')),
                ('damage', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='campaign.damage')),
                ('tags', models.ManyToManyField(blank=True, help_text='Tags for followers to explan their traits or abilities.', to='campaign.tags')),
            ],
        ),
        migrations.CreateModel(
            name='SpecialPossessionInstance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uses', models.IntegerField(blank=True, null=True)),
                ('character', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='special_possession_instance_to_character', to='campaign.character')),
                ('extras', models.ManyToManyField(blank=True, to='campaign.specialpossessionextras')),
                ('single_choice_options', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='campaign.specialpossessionsinglechoice')),
                ('special_possession', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='campaign.specialpossessions')),
            ],
        ),
        migrations.AddField(
            model_name='specialpossessionextras',
            name='special_possession',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='campaign.specialpossessions'),
        ),
        migrations.AddField(
            model_name='specialpossessionextras',
            name='tags',
            field=models.ManyToManyField(blank=True, to='campaign.tags'),
        ),
        migrations.CreateModel(
            name='SmallItemInstance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('outfitted', models.BooleanField(default=False)),
                ('uses', models.IntegerField(blank=True, null=True)),
                ('ammo', models.CharField(blank=True, choices=[('full', 'full'), ('plenty left', 'plenty left'), ('low ammo', 'low ammo'), ('all out', 'all out')], default='full', max_length=30, null=True)),
                ('character', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='smallitem_to_character', to='campaign.character')),
                ('follower', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='campaign.followerinstance')),
                ('small_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='campaign.smallitem')),
            ],
        ),
        migrations.AddField(
            model_name='smallitem',
            name='tags',
            field=models.ManyToManyField(blank=True, to='campaign.tags'),
        ),
        migrations.CreateModel(
            name='PlaceOfOrigin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location', models.CharField(max_length=100)),
                ('names', models.TextField(max_length=1000)),
                ('character_class', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='campaign.characterclass')),
            ],
        ),
        migrations.CreateModel(
            name='NPCInstance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('character_name', models.CharField(max_length=120)),
                ('pronouns', models.CharField(choices=[('he/him', 'he/him'), ('she/her', 'she/her'), ('they/them', 'they/them')], max_length=50, null=True)),
                ('armor', models.IntegerField(default=0, help_text='What are they protected by?')),
                ('max_hp', models.IntegerField()),
                ('current_hp', models.IntegerField(null=True)),
                ('damage', models.CharField(choices=[('D4', 'D4'), ('D6', 'D6'), ('D8', 'D8'), ('D10', 'D10'), ('D12', 'D12'), ('D20', 'D20')], max_length=30)),
                ('instinct', models.CharField(max_length=150)),
                ('residence', models.CharField(blank=True, choices=[('Barrier Pass', 'Barrier Pass'), ('Stonetop', 'Stonetop'), ('Marshedge', 'Marshedge'), ("Gordin's Delve", "Gordin's Delve"), ('The Steplands', 'The Steplands'), ('The Manmarch', 'The Manmarch'), ('Lygos (and other points south)', 'Lygos (and other points south)')], max_length=300, null=True)),
                ('connections_to_others', models.TextField(blank=True, help_text='Write as a full sentence, how this NPC gets along with others (especially the PCs). \n        Write each new connection on a different line.', max_length=500, null=True)),
                ('motivations', models.CharField(blank=True, help_text='Separate the motivations by comma.', max_length=200, null=True)),
                ('traits', models.CharField(blank=True, help_text='Give the NPC at least one specific, memorable trait and play that trait up.', max_length=200, null=True)),
                ('impressions', models.TextField(blank=True, help_text="\n        Write up to three impressions about this NPC, \n        their surroundings, \n        or what it's like to be around them.\n        ", max_length=300, null=True)),
                ('additional_details', models.TextField(blank=True, null=True)),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='campaign.campaign')),
                ('default_npc', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='campaign.defaultnpc')),
                ('gm_moves', models.ManyToManyField(blank=True, help_text="Write any additional moves that the default NPC didn't have.", to='campaign.gamemastermoves')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('tags', models.ManyToManyField(blank=True, to='campaign.tags')),
            ],
        ),
        migrations.CreateModel(
            name='NonPlayerCharacter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('generic_name', models.CharField(help_text='\n            Generic name that describes what kind of non player character this is.\n            Is it a monk from Barrier Pass? A Miner? A guard? Bartender?\n            Could be a name that describes their occupation.\n            ', max_length=200)),
                ('concept', models.CharField(blank=True, max_length=300, null=True)),
                ('instinct', models.CharField(blank=True, help_text='"to [do something]". An NPC\'s insinct will guide how they behave and react.', max_length=300, null=True)),
                ('max_hp', models.IntegerField(help_text="The NPC's maximum HP.")),
                ('base_damage', models.CharField(choices=[('D4', 'D4'), ('D6', 'D6'), ('D8', 'D8'), ('D10', 'D10'), ('D12', 'D12'), ('D20', 'D20')], default='D6', help_text='How dangerous are they?', max_length=100)),
                ('moves', models.ManyToManyField(blank=True, to='campaign.gamemastermoves')),
                ('tags', models.ManyToManyField(blank=True, help_text='\n            Give a certain number of tags to describe the NPC.\n            Tags are adjectives or nouns and they should finish the sentence, \n            "This NPC is/is a ___."\n            ', to='campaign.tags')),
            ],
        ),
        migrations.CreateModel(
            name='Moves',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='A descriptive name that rougly descibes the move, or just sounds cool.', max_length=150)),
                ('take_move_limit', models.IntegerField(default=1, help_text='Tells the player how many times a move can be taken (most moves can only be taken once, but some offer additional bonuses when taken again).')),
                ('description', models.TextField(max_length=500)),
                ('description2', models.TextField(blank=True, max_length=500, null=True)),
                ('description3', models.TextField(blank=True, max_length=500, null=True)),
                ('total_uses', models.IntegerField(blank=True, help_text='Does this move have a set number of uses?', null=True)),
                ('uses_name', models.CharField(default='Uses', max_length=50)),
                ('total_charges', models.IntegerField(blank=True, help_text='Does this move have charges (something that can be built up over time)?', null=True)),
                ('charge_name', models.CharField(blank=True, max_length=120, null=True)),
                ('character_class', models.ManyToManyField(related_name='moves_to_characters', to='campaign.characterclass')),
                ('move_requirements', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='campaign.moverequirements')),
                ('playbook_access', models.ManyToManyField(blank=True, related_name='playbook_access', to='campaign.characterclass')),
            ],
        ),
        migrations.AddField(
            model_name='moverequirements',
            name='move_restricted',
            field=models.ForeignKey(blank=True, help_text='What is the minimum level required to unlock this move?', null=True, on_delete=django.db.models.deletion.SET_NULL, to='campaign.moves'),
        ),
        migrations.CreateModel(
            name='MoveInstance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uses', models.IntegerField(blank=True, null=True)),
                ('charges', models.IntegerField(blank=True, null=True)),
                ('effect_activated', models.BooleanField(blank=True, help_text='If there is an effect associated with this move, it can be activated here.', null=True)),
                ('abilities', models.ManyToManyField(blank=True, to='campaign.moveextraabilities')),
                ('move', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='campaign.moves')),
            ],
            options={
                'ordering': ('move__name',),
            },
        ),
        migrations.AddField(
            model_name='moveextraabilities',
            name='move',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='campaign.moves'),
        ),
        migrations.CreateModel(
            name='MinorArcanum',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300)),
                ('front_description', models.TextField()),
                ('weight', models.IntegerField(blank=True, null=True)),
                ('armor', models.IntegerField(blank=True, null=True)),
                ('damage_bonus', models.IntegerField(blank=True, null=True)),
                ('armor_bonus', models.IntegerField(blank=True, null=True)),
                ('piercing_bonus', models.IntegerField(blank=True, null=True)),
                ('total_marks', models.IntegerField(blank=True, null=True, verbose_name='Marks needed to unlock further secrets')),
                ('back_name', models.CharField(max_length=150)),
                ('total_charges', models.IntegerField(blank=True, null=True, verbose_name='Charges that this arcana can hold.')),
                ('charge_name', models.CharField(blank=True, help_text='This is what the charge is called for the particular arcana.', max_length=100, null=True)),
                ('back_description', models.TextField()),
                ('tags', models.ManyToManyField(blank=True, to='campaign.tags')),
            ],
        ),
        migrations.CreateModel(
            name='MinorArcanaTasks',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=150)),
                ('arcana', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='campaign.minorarcanum')),
            ],
        ),
        migrations.CreateModel(
            name='MinorArcanaMoves',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=150)),
                ('arcana', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='campaign.minorarcanum')),
            ],
        ),
        migrations.CreateModel(
            name='MinorArcanaInstance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('outfitted', models.BooleanField(default=False)),
                ('marks', models.IntegerField(blank=True, null=True)),
                ('charges', models.IntegerField(blank=True, null=True)),
                ('arcana', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='campaign.minorarcanum')),
                ('character', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='minor_arcana_to_character', to='campaign.character')),
                ('follower', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='minor_arcana_to_follower', to='campaign.followerinstance')),
                ('moves', models.ManyToManyField(blank=True, to='campaign.minorarcanamoves')),
                ('tasks', models.ManyToManyField(blank=True, to='campaign.minorarcanatasks')),
            ],
        ),
        migrations.CreateModel(
            name='MajorArcanum',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300)),
                ('description1', models.TextField()),
                ('description2', models.TextField(blank=True, null=True)),
                ('description3', models.TextField(blank=True, null=True)),
                ('weight', models.IntegerField()),
                ('armor', models.IntegerField(blank=True, null=True)),
                ('damage_bonus', models.IntegerField(blank=True, null=True)),
                ('armor_bonus', models.IntegerField(blank=True, null=True)),
                ('piercing_bonus', models.IntegerField(blank=True, null=True)),
                ('total_marks', models.IntegerField(blank=True, null=True, verbose_name='Marks needed to unlock further secrets')),
                ('total_charges', models.IntegerField(blank=True, null=True, verbose_name='Charges that this arcana can hold.')),
                ('charge_name', models.CharField(blank=True, help_text='This is what the charge is called for the particular arcana.', max_length=100, null=True)),
                ('tags', models.ManyToManyField(to='campaign.tags')),
            ],
        ),
        migrations.CreateModel(
            name='MajorArcanaTasks',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=150)),
                ('arcana', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='campaign.majorarcanum')),
            ],
        ),
        migrations.CreateModel(
            name='MajorArcanaInstance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('outfitted', models.BooleanField(default=False)),
                ('marks', models.IntegerField(blank=True, null=True)),
                ('charges', models.IntegerField(blank=True, null=True)),
                ('arcana', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='campaign.majorarcanum')),
                ('character', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='major_arcana_to_character', to='campaign.character')),
                ('consequences', models.ManyToManyField(blank=True, to='campaign.arcanaconsequences')),
                ('follower', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='major_arcana_to_follower', to='campaign.followerinstance')),
                ('moves', models.ManyToManyField(blank=True, to='campaign.arcanamoveinstance')),
                ('tasks', models.ManyToManyField(blank=True, to='campaign.majorarcanatasks')),
            ],
        ),
        migrations.CreateModel(
            name='ItemInstance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('outfitted', models.BooleanField(default=False)),
                ('uses', models.IntegerField(blank=True, null=True)),
                ('ammo', models.CharField(blank=True, choices=[('full', 'full'), ('plenty left', 'plenty left'), ('low ammo', 'low ammo'), ('all out', 'all out')], default='full', max_length=30, null=True)),
                ('character', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='item_to_character', to='campaign.character')),
                ('follower', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='campaign.followerinstance')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='campaign.inventoryitem')),
            ],
        ),
        migrations.AddField(
            model_name='inventoryitem',
            name='tags',
            field=models.ManyToManyField(blank=True, to='campaign.tags'),
        ),
        migrations.CreateModel(
            name='Instinct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(max_length=1000)),
                ('character_class', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='campaign.characterclass')),
            ],
        ),
        migrations.AddField(
            model_name='followerinstance',
            name='items',
            field=models.ManyToManyField(blank=True, to='campaign.iteminstance'),
        ),
        migrations.AddField(
            model_name='followerinstance',
            name='npc_instance',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='campaign.npcinstance'),
        ),
        migrations.AddField(
            model_name='followerinstance',
            name='small_items',
            field=models.ManyToManyField(blank=True, to='campaign.smalliteminstance'),
        ),
        migrations.AddField(
            model_name='defaultnpc',
            name='default_moves',
            field=models.ManyToManyField(blank=True, to='campaign.gamemastermoves'),
        ),
        migrations.AddField(
            model_name='defaultnpc',
            name='default_tags',
            field=models.ManyToManyField(blank=True, to='campaign.tags'),
        ),
        migrations.AddField(
            model_name='damage',
            name='tags',
            field=models.ManyToManyField(blank=True, to='campaign.tags'),
        ),
        migrations.AddField(
            model_name='character',
            name='instinct',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='campaign.instinct'),
        ),
        migrations.AddField(
            model_name='character',
            name='items',
            field=models.ManyToManyField(blank=True, related_name='character_to_item', to='campaign.iteminstance'),
        ),
        migrations.AddField(
            model_name='character',
            name='major_arcana',
            field=models.ManyToManyField(blank=True, related_name='character_to_major_arcana', to='campaign.majorarcanainstance'),
        ),
        migrations.AddField(
            model_name='character',
            name='minor_arcana',
            field=models.ManyToManyField(blank=True, related_name='character_to_minor_arcana', to='campaign.minorarcanainstance'),
        ),
        migrations.AddField(
            model_name='character',
            name='move_instances',
            field=models.ManyToManyField(blank=True, to='campaign.moveinstance'),
        ),
        migrations.AddField(
            model_name='character',
            name='place_of_origin',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='campaign.placeoforigin'),
        ),
        migrations.AddField(
            model_name='character',
            name='player',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='character',
            name='small_items',
            field=models.ManyToManyField(blank=True, related_name='character_to_smallitem', to='campaign.smalliteminstance'),
        ),
        migrations.AddField(
            model_name='character',
            name='special_possessions',
            field=models.ManyToManyField(blank=True, related_name='character_to_special_possessions', to='campaign.specialpossessioninstance'),
        ),
        migrations.AddField(
            model_name='backgroundinstance',
            name='character',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='campaign.character'),
        ),
        migrations.AddField(
            model_name='background',
            name='character_class',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='campaign.characterclass'),
        ),
        migrations.CreateModel(
            name='ArcanaMoves',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='A descriptive name that rougly descibes the move, or just sounds cool.', max_length=150)),
                ('description', models.TextField(max_length=500)),
                ('total_charges', models.IntegerField(blank=True, help_text='Does this move have a number of charges that can used, run out, or replenished?', null=True)),
                ('charge_name', models.CharField(blank=True, max_length=100, null=True)),
                ('charge_bonus', models.IntegerField(blank=True, null=True)),
                ('arcana', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='campaign.majorarcanum')),
                ('move_requirements', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='campaign.arcanamoverequirements')),
            ],
        ),
        migrations.AddField(
            model_name='arcanamoverequirements',
            name='required_move',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='campaign.arcanamoves'),
        ),
        migrations.AddField(
            model_name='arcanamoveinstance',
            name='arcana_move',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='campaign.arcanamoves'),
        ),
        migrations.AddField(
            model_name='arcanamoveextras',
            name='arcana_move',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='campaign.arcanamoves'),
        ),
        migrations.AddField(
            model_name='arcanaconsequences',
            name='arcana',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='campaign.majorarcanum'),
        ),
        migrations.AddField(
            model_name='arcanaconsequences',
            name='consequence_requirements',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='campaign.arcanaconsequencerequirements'),
        ),
        migrations.AddField(
            model_name='arcanaconsequencerequirements',
            name='required_consequence',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='campaign.arcanaconsequences'),
        ),
        migrations.AddField(
            model_name='appearanceattribute',
            name='character_class',
            field=models.ManyToManyField(to='campaign.characterclass'),
        ),
        migrations.CreateModel(
            name='AnimalCompanionType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('animal_type', models.CharField(max_length=120)),
                ('animals_list', models.CharField(max_length=300)),
                ('base_hp', models.IntegerField()),
                ('base_armor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='campaign.armor')),
                ('base_damage', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='campaign.damage')),
            ],
        ),
        migrations.CreateModel(
            name='AnimalCompanionAttributes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(blank=True, max_length=150, null=True)),
                ('damage_die', models.CharField(blank=True, choices=[('D4', 'D4'), ('D6', 'D6'), ('D8', 'D8'), ('D10', 'D10'), ('D12', 'D12'), ('D20', 'D20')], max_length=10, null=True)),
                ('hp_bonus', models.IntegerField(blank=True, null=True)),
                ('piercing_bonus', models.IntegerField(blank=True, null=True)),
                ('animal_type', models.ManyToManyField(to='campaign.animalcompaniontype')),
                ('armor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='campaign.armor')),
                ('damage', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='campaign.damage')),
                ('tag', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='campaign.tags')),
            ],
        ),
        migrations.CreateModel(
            name='AnimalCompanion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120)),
                ('instinct', models.CharField(choices=[('To bully and threaten', 'To bully and threaten'), ('To fill its belly', 'To fill its belly'), ('To get distracted', 'To get distracted'), ('To give chase', 'To give chase'), ('To make mischief', 'To make mischief'), ('To startle and panic', 'To startle and panic'), ('To run rampant', 'To run rampant')], max_length=150)),
                ('cost', models.CharField(choices=[('Play, grooming, training, affection', 'Play, grooming, training, affection'), ('Time off on its own, free to roam', 'Time off on its own, free to roam'), ('Cozy quarters, comform, ample food', 'Cozy quarters, comform, ample food')], max_length=150)),
                ('loyalty', models.IntegerField(default=0)),
                ('max_hp', models.IntegerField(blank=True, null=True)),
                ('current_hp', models.IntegerField(blank=True, null=True)),
                ('armor', models.IntegerField(blank=True, null=True)),
                ('damage', models.CharField(blank=True, choices=[('D4', 'D4'), ('D6', 'D6'), ('D8', 'D8'), ('D10', 'D10'), ('D12', 'D12'), ('D20', 'D20')], max_length=20, null=True)),
                ('additional_detail', models.TextField(blank=True, null=True)),
                ('animal_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='campaign.animalcompaniontype')),
                ('attributes', models.ManyToManyField(blank=True, to='campaign.animalcompanionattributes')),
                ('beast_of_legend', models.ManyToManyField(blank=True, to='campaign.beastoflegend')),
                ('character', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='campaign.character')),
            ],
        ),
        migrations.CreateModel(
            name='TheWouldBeHero',
            fields=[
                ('character_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='campaign.character')),
                ('trouble', models.TextField(max_length=1000, verbose_name='When did your fear or anger last cause you trouble?')),
                ('response', models.TextField(max_length=1000, verbose_name='What did you do?')),
                ('result', models.TextField(max_length=1000, verbose_name='How did it turn out?')),
                ('anger', models.ManyToManyField(related_name='angers', to='campaign.fearandanger', verbose_name='What makes you burn with righteous anger?')),
                ('fear', models.ManyToManyField(related_name='fears', to='campaign.fearandanger', verbose_name='What do you fear the most?')),
            ],
            bases=('campaign.character',),
        ),
        migrations.CreateModel(
            name='TheLightbearer',
            fields=[
                ('character_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='campaign.character')),
                ('worship_of_helior', models.CharField(choices=[('ancient, widespread, and well-known', 'ancient, widespread, and well-known'), ('most common in Lygos and the south', 'most common in Lygos and the south'), ('a new thing, still unheard of by many', 'a new thing, still unheard of by many'), ('widely persecuted', 'widely persecuted')], max_length=300, verbose_name='The worship of Helior is...')),
                ('heliors_shrine', models.CharField(choices=[('the place of highest honor, even if Tor is more popular', 'the place of highest honor, even if Tor is more popular'), ('been well-tended and given due respect', 'been well-tended and given due respect'), ('recently been restored, perhaps by you', 'recently been restored, perhaps by you'), ('seen better days for certain', 'seen better days for certain')], max_length=250, verbose_name="In Stonetop's Pavilion of the Gods, Helior's shrine has...")),
                ('origin_of_powers', models.CharField(choices=[('through years of study and devotion', 'through years of study and devotion'), ('when your predecessor passed them on', 'when your predecessor passed them on'), ('suddenly, at a moment of great need.', 'suddenly, at a moment of great need.'), ('after a visitation from Helior or one of his servants', 'after a visitation from Helior or one of his servants'), ('when you first laid eyes upon the _______', 'when you first laid eyes upon the _______')], max_length=250, verbose_name='You came into your powers...')),
                ('invocations', models.ManyToManyField(blank=True, to='campaign.invocation')),
                ('methods_of_worship', models.ManyToManyField(to='campaign.heliorworship')),
                ('predecessor', models.ManyToManyField(to='campaign.lightbearerpredecessor')),
            ],
            bases=('campaign.character',),
        ),
        migrations.CreateModel(
            name='TheJudge',
            fields=[
                ('character_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='campaign.character')),
                ('shrine_of_aratis', models.CharField(choices=[('a hub of the community, a place of frequent rites, petitions, and celebrations', 'A hub of the community, a place of frequent rites, petitions, and celebrations'), ('used only on high holidays, for each home keeps its own shrine above the hearth', 'Used only on high holidays, for each home keeps its own shrine above the hearth'), ('neglected by most, tended only by you and a handful of believers', 'Neglected by most, tended only by you and a handful of believers'), ('a grim place of judgement and punishment, shunned by all but her chosen', 'A grim place of judgement and punishment, shunned by all but her chosen'), ('newly established, cramped and spare', 'Newly established, cramped and spare')], max_length=1000)),
                ('chronical_negatives', models.ManyToManyField(limit_choices_to=models.Q(('attribute_type__iexact', 'negative')), related_name='negative_aspects', to='campaign.thechronical')),
                ('chronical_positives', models.ManyToManyField(limit_choices_to=models.Q(('attribute_type__iexact', 'positive')), related_name='positive_aspects', to='campaign.thechronical')),
                ('demands_of_aratis', models.ManyToManyField(to='campaign.demandsofaratis')),
                ('symbol_of_authority', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='campaign.symbolofauthority')),
            ],
            bases=('campaign.character',),
        ),
        migrations.CreateModel(
            name='TheHeavy',
            fields=[
                ('character_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='campaign.character')),
                ('fears', models.ManyToManyField(limit_choices_to=models.Q(('history_theme__iexact', 'fears')), related_name='fears', to='campaign.historyofviolence')),
                ('stories_of_glory', models.ManyToManyField(limit_choices_to=models.Q(('history_theme__iexact', 'stories of glory')), related_name='glory', to='campaign.historyofviolence')),
                ('terrible_stories', models.ManyToManyField(limit_choices_to=models.Q(('history_theme__iexact', 'terrible stories')), related_name='terrible', to='campaign.historyofviolence')),
            ],
            bases=('campaign.character',),
        ),
        migrations.CreateModel(
            name='TheBlessed',
            fields=[
                ('character_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='campaign.character')),
                ('stock_max', models.IntegerField(default=3, help_text='What is the current maximum stock quantity?', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(16)])),
                ('current_stock', models.IntegerField(default=3, help_text='How much stock is currently in the sacred pouch?')),
                ('pouch_origin', models.CharField(choices=[('an heirloom', 'an heirloom'), ('made just for you', 'made just for you'), ('your own work', 'your own work')], help_text='How did The Blessed character come to carry this magical pouch?', max_length=300)),
                ('pouch_material', models.CharField(choices=[('fur', 'fur'), ('drakescale', 'drakescale'), ('leather', 'leather'), ('woven', 'woven'), ('demonflesh', 'demonflesh')], help_text='What materials could the pouch be made of?', max_length=300)),
                ('pouch_aesthetics', models.CharField(choices=[('unadorned', 'unadorned'), ('beadwork', 'beadwork'), ('rich dyes', 'rich dyes'), ('runes', 'runes')], help_text='What could decorate the outside of the pouch?', max_length=300)),
                ('danus_shrine', models.CharField(choices=[('loved, well-used, dripping with offerings and petitions.', 'Loved, well-used, dripping with offerings and petitions.'), ('little more than a token of respect, for her holy places are anywhere but here.', 'Little more than a token of respect, for her holy places are anywhere but here.'), ('given a wide berth by most, and approached only with care and propitiation.', 'Given a wide berth by most, and approached only with care and propitiation.'), ('neglected and all but forgotten, except by a few.', 'Neglected and all but forgotten, except by a few.')], help_text="What is Danu's Shrine like?", max_length=300, null=True)),
                ('initiates_of_danu', models.ManyToManyField(blank=True, to='campaign.initiateofdanuinstance')),
                ('offerings', models.ManyToManyField(to='campaign.danuofferings')),
                ('remarkable_traits', models.ManyToManyField(to='campaign.remarkabletraits')),
            ],
            bases=('campaign.character',),
        ),
        migrations.CreateModel(
            name='TallTales',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tale_theme', models.CharField(choices=[('got lost in the Great Wood', 'got lost in the Great Wood'), ('got lost in the Flats', 'got lost in the Flats'), ('got lost in the Stepland', 'got lost in the Steplands'), ("got lost in Ferrier's Fen", "got lost in Ferrier's Fen"), ('got lost in foothills', 'got lost in the foothills'), ('got lost in the hufel peaks', 'got lost in the hufel peaks'), ('were on watch when the crinwin raided', 'were on watch when the crinwin raided'), ('dared each other to explore the Ruined Tower', 'dared each other to explore the Ruined Tower'), ('managed to rile up a small band of Hillfolk', 'managed to rile up a small band of Hillfolk'), ('braved the Labyrinth, just a little', 'braved the Labyrinth, just a little'), ("stole that crazy old man's book", "stole that crazy old man's book"), ('went poking around the old Barrow Mounds', 'went poking around the old Barrow Mounds')], max_length=200, verbose_name='There was that time that you...')),
                ('tale_results', models.CharField(choices=[('a story no one believes.', 'a story no one believes.'), ('a nasty scar; wanna see?', 'a nasty scar; wanna see?'), ('the occasional nightmare.', 'the occasional nightmare.'), ('this map with runes no one can read.', 'this map with runes no one can read.'), ('this key that open who-knows-what.', 'this key that open who-knows-what.')], max_length=200, verbose_name="But all you've got left to show for it is...")),
                ('additional_details', models.TextField(blank=True, max_length=1000, null=True)),
                ('tale_details', models.ManyToManyField(to='campaign.taledetails', verbose_name='And you ended up...')),
                ('character', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='campaign.thefox')),
            ],
        ),
    ]
